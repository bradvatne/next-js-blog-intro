{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport matter from 'gray-matter';\nimport marked from 'marked';\nimport yaml from 'js-yaml';\nexport function getAllPosts() {\n  return _getAllPosts.apply(this, arguments);\n}\n\nfunction _getAllPosts() {\n  _getAllPosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var context, posts, _iterator, _step, key, post, content, meta;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            context = require.context('../_posts', false, /\\.md$/);\n            posts = [];\n            _iterator = _createForOfIteratorHelper(context.keys());\n            _context.prev = 3;\n\n            _iterator.s();\n\n          case 5:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 15;\n              break;\n            }\n\n            key = _step.value;\n            post = key.slice(2);\n            _context.next = 10;\n            return import(\"../_posts/\".concat(post));\n\n          case 10:\n            content = _context.sent;\n            meta = matter(content[\"default\"]);\n            posts.push({\n              slug: post.replace('.md', ''),\n              title: meta.data.title\n            });\n\n          case 13:\n            _context.next = 5;\n            break;\n\n          case 15:\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](3);\n\n            _iterator.e(_context.t0);\n\n          case 20:\n            _context.prev = 20;\n\n            _iterator.f();\n\n            return _context.finish(20);\n\n          case 23:\n            return _context.abrupt(\"return\", posts);\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 17, 20, 23]]);\n  }));\n  return _getAllPosts.apply(this, arguments);\n}\n\nexport function getPostBySlug(_x) {\n  return _getPostBySlug.apply(this, arguments);\n}\n\nfunction _getPostBySlug() {\n  _getPostBySlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(slug) {\n    var fileContent, meta, content;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return import(\"../_posts/\".concat(slug, \".md\"));\n\n          case 2:\n            fileContent = _context2.sent;\n            meta = matter(fileContent[\"default\"]);\n            content = marked(meta.content);\n            return _context2.abrupt(\"return\", {\n              title: meta.data.title,\n              content: content\n            });\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getPostBySlug.apply(this, arguments);\n}\n\nexport function getConfig() {\n  return _getConfig.apply(this, arguments);\n}\n\nfunction _getConfig() {\n  _getConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var config;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return import(\"../config.yml\");\n\n          case 2:\n            config = _context3.sent;\n            return _context3.abrupt(\"return\", yaml.safeLoad(config[\"default\"]));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getConfig.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/Brad/nextjs-blog/api/index.js"],"names":["matter","marked","yaml","getAllPosts","context","require","posts","keys","key","post","slice","content","meta","push","slug","replace","title","data","getPostBySlug","fileContent","getConfig","config","safeLoad"],"mappings":";;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,gBAAsBC,WAAtB;AAAA;AAAA;;;0EAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,OADH,GACaC,OAAO,CAACD,OAAR,CAAgB,WAAhB,EAA6B,KAA7B,EAAoC,OAApC,CADb;AAEGE,YAAAA,KAFH,GAEW,EAFX;AAAA,mDAGcF,OAAO,CAACG,IAAR,EAHd;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGOC,YAAAA,GAHP;AAIKC,YAAAA,IAJL,GAIYD,GAAG,CAACE,KAAJ,CAAU,CAAV,CAJZ;AAAA;AAAA,mBAKqB,2BAAoBD,IAApB,EALrB;;AAAA;AAKKE,YAAAA,OALL;AAMKC,YAAAA,IANL,GAMYZ,MAAM,CAACW,OAAO,WAAR,CANlB;AAODL,YAAAA,KAAK,CAACO,IAAN,CAAW;AACTC,cAAAA,IAAI,EAAEL,IAAI,CAACM,OAAL,CAAa,KAAb,EAAmB,EAAnB,CADG;AAETC,cAAAA,KAAK,EAAEJ,IAAI,CAACK,IAAL,CAAUD;AAFR,aAAX;;AAPC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA,6CAYIV,KAZJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeP,gBAAsBY,aAAtB;AAAA;AAAA;;;4EAAO,kBAA6BJ,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACqB,2BAAoBA,IAApB,SADrB;;AAAA;AACCK,YAAAA,WADD;AAECP,YAAAA,IAFD,GAEQZ,MAAM,CAACmB,WAAW,WAAZ,CAFd;AAGCR,YAAAA,OAHD,GAGWV,MAAM,CAACW,IAAI,CAACD,OAAN,CAHjB;AAAA,8CAIE;AACLK,cAAAA,KAAK,EAAEJ,IAAI,CAACK,IAAL,CAAUD,KADZ;AAELL,cAAAA,OAAO,EAAEA;AAFJ,aAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUP,gBAAsBS,SAAtB;AAAA;AAAA;;;wEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgB,uBADhB;;AAAA;AACCC,YAAAA,MADD;AAAA,8CAEEnB,IAAI,CAACoB,QAAL,CAAcD,MAAM,WAApB,CAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import matter from 'gray-matter'\r\nimport marked from 'marked'\r\nimport yaml from 'js-yaml'\r\n\r\nexport async function getAllPosts() {\r\n    const context = require.context('../_posts', false, /\\.md$/)\r\n    const posts = []\r\n    for(const key of context.keys()){\r\n      const post = key.slice(2);\r\n      const content = await import(`../_posts/${post}`);\r\n      const meta = matter(content.default)\r\n      posts.push({\r\n        slug: post.replace('.md',''),\r\n        title: meta.data.title\r\n      })\r\n    }\r\n    return posts;\r\n  }\r\n\r\nexport async function getPostBySlug(slug) {\r\n  const fileContent = await import(`../_posts/${slug}.md`)\r\n  const meta = matter(fileContent.default)\r\n  const content = marked(meta.content)    \r\n  return {\r\n    title: meta.data.title, \r\n    content: content\r\n  }\r\n}\r\n\r\nexport async function getConfig() {\r\n  const config = await import(`../config.yml`)\r\n  return yaml.safeLoad(config.default);\r\n}"]},"metadata":{},"sourceType":"module"}